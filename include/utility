// UnderC Development Project
#ifndef __UTILITY_
#define __UTILITY_

namespace std {

    namespace rel_ops {

        template< class Type >
        bool operator!=( const Type &x, const Type &y )
        {
            return !( x == y );
        }

        template< class Type >
        bool operator>( const Type &x, const Type &y )
        {
            return( y < x );
        }

        template< class Type >
        bool operator<=( const Type &x, const Type &y )
        {
            return( !( y < x ) );
        }

        template< class Type >
        bool operator>=( const Type &x, const Type &y )
        {
            return( !( x < y ) );
        }

    } // namespace rel_ops


    // Pair support

    template< class Type1, class Type2>
    struct pair {
        typedef Type1 first_type;
        typedef Type2 second_type;

        Type1 first;
        Type2 second;
		
		pair() {}

        pair( const Type1 &x, const Type2 &y ) :
            first( x ), second( y )
        { }
		
		//Is not correct and could be modified when
		//embedded template is implemented
		pair( const pair< Type1, Type2 > &other ) :
            first( other.first ), second( other.second )
        { }
    };

    template< class Type1, class Type2 >
    inline
    bool operator==( const pair< Type1, Type2 > &x,
                     const pair< Type1, Type2 > &y )
    {
        return( x.first == y.first && x.second == y.second );
    }

    template< class Type1, class Type2 >
    inline
    bool operator<( const pair< Type1, Type2 > &x,
                    const pair< Type1, Type2 > &y )
    {
        return( x.first < y.first ||
                ( !( y.first < x.first ) && x.second < y.second ) );
    }

    template< class Type1, class Type2 >
    inline
    bool operator!=( const pair< Type1, Type2 > &x,
                     const pair< Type1, Type2 > &y )
    {
        return( !(x == y) );
    }

    template< class Type1, class Type2 >
    inline
    bool operator>( const pair< Type1, Type2 > &x,
                    const pair< Type1, Type2 > &y )
    {
        return( y < x );
    }

    template< class Type1, class Type2 >
    inline
    bool operator>=( const pair< Type1, Type2 > &x,
                     const pair< Type1, Type2 > &y )
    {
        return( !(x < y) );
    }

    template< class Type1, class Type2 >
    inline
    bool operator<=( const pair< Type1, Type2 > &x,
                     const pair< Type1, Type2 > &y )
    {
        return( !(y < x) );
    }

    template< class Type1, class Type2 >
    inline
    pair< Type1, Type2 > make_pair( const Type1 &x, const Type2 &y )
    {   //This implementation is incorrect
	      Type1 i1 = x;
	      Type2 i2 = y;
	      pair< Type1, Type2 > pair_them(x, y);
        return( pair_them );
    }
    
} // namespace std

#endif
