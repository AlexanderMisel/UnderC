How to build UnderC

Currently the version of UnderC working under Linux is console-mode only, 
unlike the Win32 version. Some of those Windows-only files are along for the 
ride, but aren't needed. You will need a reasonably fresh C++ compiler for
this build to work; I'm using G++ 2.96. Old versions of GCC like 2.7 will not
make the grade because of the extensive use of namespaces. 

By default this build makes a non-statically linked executable using the 
readline library for command editing. 'make STATIC=1' will build a static 
executable, but for some curious reason the O1 optimization level causes
trouble. O1 is fine for the dynamically linked version, although O2 breaks
the verification suite.  After setting UC_HOME to the directory where the
build took place, you can test UnderC by going up into the verify 
subdirectory and typing '../ucc tests.cpp', which should just print out 'ok'.
Compared to the Win32 version, this verification suite does cause some 
problems. By the final test in tests.cpp, there seems to be some corruption
and an attempt to open a text file results in the console being opened instead.
This is puzzling but I leave it as an issue for more experienced Linux 
people to explore.

I've included the C++ file generated by Bison from the grammar file parser.y,
which is tparser.cpp. The makefile has a rule to generate this from parser.y
except that I had some difficulty with using the bison.simple that came with
the Linux Bison 1.24. (At least that's what --version said: the comment at
the top of the output says 1.28). This is all probably due to the grammar
being very stressed and full of conflicts. So use the environment variable
BISON_SIMPLE to override the usual place for bison.simple (on my system it's
usually /usr/lib; your mileage may vary) and use the bison.simple which I
have included, which comes from the Win32 version of Bison 1.24. 

Getting this going on other unixes should be straightforward except that I am
depending on the GCC predefined macro __linux__ to discriminate between
Win32 and the rest.  The idea is to keep any OS-specific stuff in os.cpp,
hard_except.cpp, and directcall.cpp.  This last file is where you would have
to write a little bit of inline assembly to connect the stack engine with
native routines.  If anybody can do this in standard C++, then I would be
most grateful.

Please see the DISCUSSION document for more background on the code.

Steve Donovan,
December 2001

